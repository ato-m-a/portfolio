[
  {
    "id": "JavaScript",
    "icon": "/images/javascript.webp",
    "level": "Advanced",
    "contents": [
      "ECMAScript 스펙의 동향에 관심을 기울이며 발전하는 기능을 적극적으로 학습하고 적용합니다.",
      "Map(WeakMap), Set(WeakSet)과 같은 자료 구조를 이해하고 적절히 활용합니다.",
      "JavaScript의 이벤트 루프와 비동기 프로그래밍에 대해 이해합니다.",
      "트러블슈팅 과정에 실행 컨텍스트, 스코프 체이닝 등 핵심 개념을 이해하고 문제를 효과적으로 해결합니다.",
      "closure, currying과 같은 함수형 프로그래밍 기법을 이해하고, 사용합니다.",
      "this 바인딩의 일관성을 위해 화살표 함수 사용을 선호합니다."
    ]
  },
  {
    "id": "TypeScript",
    "icon": "/images/typescript.webp",
    "level": "Advanced",
    "contents": [
      "Generic, Mapped, Intersection 등 고급 타입을 적극 사용해 코드의 유연성과 타입 추론을 극대화합니다.",
      "Pick, Omit, Partial, Required 등 유틸리티 타입을 적극 사용해 타입 안정성과 재사용성을 강화합니다.",
      "any 사용을 지양하고 unknown과 타입 가드를 적절히 활용해 타입 안전성을 보장합니다.",
      "enum과 const enum의 컴파일 타임과 런타임에서의 차이점을 이해하고, 트리 쉐이킹 최적화를 고려해 적절히 사용합니다.",
      "정적 타입 검사의 중요성을 인식하고 이를 적극 활용해 런타임 에러를 사전에 예방합니다."
    ]
  },
  {
    "id": "Next.js",
    "icon": "/images/nextjs.webp",
    "level": "Advanced",
    "contents": [
      "다양한 렌더링 전략(SSR, ISR, SSG, SPA)에 대한 이해를 갖추고, 적절한 상황에 적용합니다.",
      "클라이언트와 서버 측의 Hydration 문제에 대한 이해를 바탕으로 한 트러블슈팅 경험이 있습니다.",
      "SSR 환경에서 경로와 서브도메인 기반 라우팅 시나리오를 구성하고, 멀티테넌시 아키텍처를 구축한 경험이 있습니다.",
      "Next.js API를 BFF로 사용해 백엔드와 데이터 책임을 효율적으로 분담하고, 복잡한 화면의 데이터 요구사항을 충족합니다.",
      "Next.js의 App 라우팅, Page 라우팅 시스템을 이해하고 적절히 활용합니다."
    ]
  },
  {
    "id": "React",
    "icon": "/images/react.webp",
    "level": "Intermediate",
    "contents": [
      "React v16의 hook을 효과적으로 활용하며, 커스텀 hook을 통해 구현 일관성과 재사용성을 강화합니다.",
      "깊은 Props Drilling과 불필요한 리렌더링을 방지하도록 적절한 상태 관리 도구를 선택하고, 활용합니다.",
      "React 함수형 컴포넌트의 라이프사이클과 렌더링 메커니즘에 대한 이해를 바탕으로 성능 개선 및 트러블슈팅을 효과적으로 수행합니다.",
      "memo, useMemo hook과 같은 메모이제이션을 적절히 활용해 불필요한 재렌더링을 최소화합니다."
    ]
  },
  {
    "id": "상태관리",
    "icon": "⚙️",
    "level": "Intermediate",
    "contents": [
      "Flux, Atomic, Proxy와 같은 상태 관리 기법을 이해하고, 상황에 맞게 적절히 선택해 활용합니다.",
      "TanStack Query를 활용해 비동기 데이터 처리 흐름을 간소화하고 적절한 캐싱 전략과 함께 서버 상태와의 동기화를 수행합니다.",
      "Jotai와 Recoil 같은 Atomic 상태 관리 기법을 기본적으로 선호하며 복잡도에 따라 Redux(Toolkit) 및 Zustand 사용을 선호합니다.",
      "Render Props 패턴 및 고차 함수 등의 활용으로 재사용성을 강화하고 불필요한 재렌더링을 최소화합니다.",
      "적절한 컴포넌트 추상화 단계와 함께 로컬 상태 사용을 선호하며 여러 계층에 걸친 복잡한 상태 공유에 전역 상태 관리를 사용합니다."
    ]
  },
  {
    "id": "NestJS",
    "icon": "/images/nestjs.webp",
    "level": "Intermediate",
    "contents": [
      "핵심 개념인 캡슐화, 싱글턴 패턴에 대한 기초적인 이해도를 갖추고 있습니다.",
      "HTTP 어댑터에 대한 기초적인 이해를 바탕으로 FaaS 서비스에서의 트러블슈팅 경험이 있습니다.",
      "의존성 주입에 대한 이해를 바탕으로 객체의 인스턴스를 효율적으로 사용합니다.",
      "TypeORM과 함께 사용해 데이터베이스 관리 및 기초적인 CRUD 작업을 수행할 수 있습니다."
    ]
  },
  {
    "id": "Amazon_AWS",
    "icon": "/images/aws.webp",
    "level": "Intermediate",
    "contents": [
      "EC2, ELB 서비스를 사용해 가상 머신에 배포하고, 응용 계층 라우팅을 구성할 수 있습니다.",
      "S3 서비스를 사용해 정적 파일을 관리하고, CloudFront를 사용한 CDN 서비스를 구성할 수 있습니다.",
      "ECR 서비스에 Docker 이미지를 배포하고, ECS(Fargate), Batch 서비스를 사용해 배치 시스템을 구축할 수 있습니다.",
      "Lambda 서비스를 사용해 서버리스 아키텍처를 구성할 수 있습니다."
    ]
  }
]